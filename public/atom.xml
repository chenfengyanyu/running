<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jartto&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/ee1200dca3e1b26043739f4bd08bfc12</icon>
  <subtitle>Jartto 个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jartto.wang/"/>
  <updated>2019-09-09T13:25:15.298Z</updated>
  <id>http://jartto.wang/</id>
  
  <author>
    <name>Jartto</name>
    <email>jartto@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网站优化，这些工具你一定用得着</title>
    <link href="http://jartto.wang/2019/09/08/web-optimization-tools/"/>
    <id>http://jartto.wang/2019/09/08/web-optimization-tools/</id>
    <published>2019-09-08T10:52:36.000Z</published>
    <updated>2019-09-09T13:25:15.298Z</updated>
    
    <content type="html"><![CDATA[<p>“工欲善其事，必先利其器”，在「<a href="http://jartto.wang/2019/02/16/web-optimization/">网站优化实战</a>」中我们提到了一些优化的相关经验，并没有对优化工具展开讨论，这节就让我们一起上手实践吧！<br><a id="more"></a></p><h4 id="一、概要"><a href="#一、概要" class="headerlink" title="一、概要"></a>一、概要</h4><div class="alert success"><p>关于优化工具，我们主要从两方面说起：「性能评估工具」和「优化工具」。</p></div><p>1.性能评估工具</p><ul><li>Lighthouse</li><li>PageSpeed</li><li>YSlow</li></ul><p>2.优化工具我们主要依赖「Chrome DevTools」，大致如下：</p><ul><li>Network</li><li>Performance</li><li>Show Third Party Badges</li><li>Block Request URL</li><li>Coverage</li><li>DOM</li><li>Rendering</li><li>Layer</li></ul><h4 id="二、Lighthouse"><a href="#二、Lighthouse" class="headerlink" title="二、Lighthouse"></a>二、Lighthouse</h4><p>1.<code>Lighthouse</code> 安装<br><code>Chrome Setting</code> - 更多工具 - 扩展程序 - 打开 <code>Chrome</code> 网上应用店 - <code>Lighthouse</code></p><p>2.插件 - 生成报告<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/optimization-tools/lighthouse.png" alt="lighthouse"></p><div class="alert success"><p>报告是我们的一个重要参考指标，这是网站评估的通用方法。</p></div><p>当然，网站也会有不同的类别，<strong>关注指标</strong>也不尽相同，后续我们会继续探讨「如何制定合理的网站优化性能指标」。</p><p>3.优化建议<br><code>Lighthouse</code> 比较人性化的点在于他既提出了问题，同时也提出了解决建议。<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/optimization-tools/performance.png" alt="performance"></p><h4 id="三、PageSpeed"><a href="#三、PageSpeed" class="headerlink" title="三、PageSpeed"></a>三、PageSpeed</h4><p>1.使用 <code>PageSpeed</code><br>我们可以在「Chrome DevTools」菜单栏中找到并打开：<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/optimization-tools/pagespeed.png" alt="pagespeed"></p><p>2.分析报告<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/optimization-tools/pagescore.png" alt="pagescore"></p><h4 id="四、Chrome-DevTools-Network"><a href="#四、Chrome-DevTools-Network" class="headerlink" title="四、Chrome DevTools - Network"></a>四、Chrome DevTools - Network</h4><p>1.关于 <code>Network</code> 我们重点关注标注的 3 处<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/optimization-tools/network.png" alt="network"></p><p>2.<code>Timing</code> 也是优化不可缺少的工具：<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/optimization-tools/network1.png" alt="network1"></p><p>补充说明一下：<br><code>TTFB</code>：等待初始响应所用的时间，也称为第一字节的时间，这是我们判断服务器以及网络状况的重要指标。</p><div class="alert info"><p>此时间将捕捉到服务器往返的延迟时间，以及等待服务器传送响应所用的时间。</p></div><h4 id="五、Chrome-DevTools-Performance"><a href="#五、Chrome-DevTools-Performance" class="headerlink" title="五、Chrome DevTools - Performance"></a>五、Chrome DevTools - Performance</h4><p>1.概览<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/optimization-tools/perf.png" alt="perf"></p><p>2.版面主要由 4 部分构成</p><ul><li>控制面板：录制，清除，配置记录期间需要捕获的信息</li><li><code>Overview</code>：页面性能的高级汇总，以及页面加载情况</li><li>火焰图：<code>CPU</code> 堆叠追踪的可视化</li><li>总览：饼图记录各部分耗时情况</li></ul><p>3.Overview 详解</p><ul><li><p>FPS<br>每秒帧数。绿色竖线越高，<code>FPS</code> 越高。 <code>FPS</code> 图表上的红色块表示长时间帧，很可能会出现卡顿。</p></li><li><p>CPU<br><code>CPU</code> 资源。此面积图指示消耗 <code>CPU</code> 资源的事件类型。</p></li><li><p>NET<br>每条彩色横杠表示一种资源。横杠越长，检索资源所需的时间越长。<br>每个横杠的浅色部分表示等待时间（从请求资源到第一个字节下载完成的时间）。<br>深色部分表示传输时间（下载第一个和最后一个字节之间的时间）。</p></li></ul><div class="alert danger"><p>需要特别注意，<code>Performance</code> 工具中的每一种颜色其实都有自己的含义。</p></div><ul><li>HTML 文件为蓝色。</li><li>脚本为黄色。</li><li>样式表为紫色。</li><li>媒体文件为绿色。</li><li>其他资源为灰色。</li></ul><p>小技巧：<br><div class="alert info"><p>使用无痕模式，减少 Chrome 扩展程序会给应用的干扰。</p></div></p><p>4.火焰图</p><ul><li><p>Network<br><code>Network</code> 这里我们可以看出来，我们资源加载的一个顺序情况。什么时间加载了什么资源，通过这些，我们更直观的知道资源是否并行加载。</p></li><li><p>Frames<br><a href="http://jartto.wang/2019/09/08/web-optimization-tools/">上文</a>提及到的页面帧情况。</p></li><li><p>Interactions</p></li><li><p>Timings 中如下 5 个指标是我们优化的方向      </p><ul><li>First Paint</li><li>DOMContentLoaded Event</li><li>Onload Event</li><li>First Contentful Paint</li><li>First Meaningful Paint</li></ul></li><li><p>Main：展示了主线程运行状况。<br><code>X</code> 轴代表着时间，每个长条代表着一个 <code>event</code>。长条越长就代表这个 <code>event</code> 花费的时间越长。<br><code>Y</code> 轴代表了调用栈 <code>call stack</code> 。</p></li></ul><p>在栈里，上面的 <code>event</code> 调用了下面的 <code>event</code>。</p><p><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/optimization-tools/perf1.png" alt="perf1"></p><p>注意红色警告：<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/optimization-tools/perf2.png" alt="perf2"></p><ul><li>JS Heap<br><code>JavaScript</code> 运行过程中的大部分数据都保存在堆 <code>Heap</code> 中，所以 <code>JavaScript</code> 性能分析另一个比较重要的方面是<strong>内存</strong>，也就是<strong>堆的分析</strong>。</li></ul><p><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/optimization-tools/perf3.png" alt="perf3"></p><ul><li>打开 Performance 监视器</li></ul><p><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/optimization-tools/perf4.png" alt="perf4"></p><h4 id="六、Chrome-DevTools-Show-Third-Party-Badges"><a href="#六、Chrome-DevTools-Show-Third-Party-Badges" class="headerlink" title="六、Chrome DevTools - Show Third Party Badges"></a>六、Chrome DevTools - Show Third Party Badges</h4><p>很多情况下，并不是我们网站本身的问题，有可能你使用的三方资源拖累了站点性能。所以，我们需要使用 <code>Show Third Party Badges</code> 来进行排查。</p><p>1.测试站点：<a href="https://techcrunch.com/" target="_blank" rel="noopener">https://techcrunch.com/</a></p><p>2.打开控制面板：<code>Command + Shift + P</code><br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/optimization-tools/badge.png" alt="badge"></p><p>3.打开 <code>Network</code>，注意资源前面的<strong>彩色标志</strong><br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/optimization-tools/badge1.png" alt="badge1"></p><div class="alert success"><p>三方资源都被标记出来了，移除或者替换那些影响性能的东西。</p></div><h4 id="七、Chrome-DevTools-Block-Request-URL"><a href="#七、Chrome-DevTools-Block-Request-URL" class="headerlink" title="七、Chrome DevTools - Block Request URL"></a>七、Chrome DevTools - Block Request URL</h4><p>对于项目中不确定是否有用的资源，我们可以使用 <code>Block Request URL</code> 来排除。</p><p>1.选中资源 - 右键 - <code>Block Request URL</code><br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/optimization-tools/block.png" alt="block"></p><div class="alert info"><p>阻止某些资源加载，<strong>控制变量法</strong>来排查页面性能问题。</p></div><h4 id="八、Chrome-DevTools-Coverage"><a href="#八、Chrome-DevTools-Coverage" class="headerlink" title="八、Chrome DevTools - Coverage"></a>八、Chrome DevTools - Coverage</h4><p>1.打开控制面板：<code>Command + Shift + P</code></p><p>2.输入：<code>Show Coverage</code><br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/optimization-tools/corvage.png" alt="corvage"></p><p>3.找到相应的文件，可以看到文件左侧已经标<strong>记出了部分代码的使用情况</strong><br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/optimization-tools/coverage.png" alt="coverage"></p><p>解决思路也很简单：<br>尽可能去通过 <code>Webpack</code> 来<a href="http://jartto.wang/2019/02/16/web-optimization/">拆包</a>，控制大小在 <code>40KB</code> 以下，移除那些未使用代码。</p><h4 id="九、Chrome-DevTools-DOM"><a href="#九、Chrome-DevTools-DOM" class="headerlink" title="九、Chrome DevTools - DOM"></a>九、Chrome DevTools - DOM</h4><p>我们经常提到要优化 <code>Dom</code>，那么节点控制在什么范围才合理呢？</p><ul><li>总共少于 1500 个节点</li><li>最大深度为 32 个节点</li><li>不要存在子节点超过 60 个节点的父节点</li></ul><p>查看所有 <code>DOM</code> 节点数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'*'</span>).length</span><br></pre></td></tr></table></figure></p><p>查看子元素个数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'body &gt; *'</span>).length</span><br></pre></td></tr></table></figure></p><div class="alert danger"><p>通常，只在需要时查找创建 DOM 节点的方法，并在不再需要时<strong>销毁</strong>它们。</p></div><h4 id="十、Chrome-DevTools-Rendering"><a href="#十、Chrome-DevTools-Rendering" class="headerlink" title="十、Chrome DevTools - Rendering"></a>十、Chrome DevTools - Rendering</h4><p>关于重渲对页面的影响，我们就不多说了。那么如何知道<strong>页面的渲染</strong>过程呢？我们可以通过 <code>Rendering</code> 来可视化查看。</p><p>1.打开 Rendering 选项<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/optimization-tools/render.png" alt="render"></p><p>2.刷新页面<br><div class="alert warning"><p>绿色区域越重，说明重复渲染的次数越多，通过优化 DOM 来减少无效渲染。</p></div></p><p><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/optimization-tools/render.gif" alt="render"></p><h4 id="十一、Chrome-DevTools-Layer"><a href="#十一、Chrome-DevTools-Layer" class="headerlink" title="十一、Chrome DevTools - Layer"></a>十一、Chrome DevTools - Layer</h4><p>你可能会很好奇，为什么要查看图层？<br><div class="alert info"><p>这是因为，我们经常会在不知不觉的情况下搞乱了图层关系，或者增加了不合适的图层。</p></div></p><p>1.打开控制面板：<code>Command + Shift + P</code><br>2.选择 <code>Layer</code> 选项<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/optimization-tools/layer.png" alt="layer"></p><p>是不是图层问题就清清楚楚的摆在眼前了～</p><h4 id="十二、总结"><a href="#十二、总结" class="headerlink" title="十二、总结"></a>十二、总结</h4><p>通过优化工具，我们可以轻而易举的对网站进行定位分析。之后就可以快速展开优化，让网站高性能的运转起来。优化，也不过如此。</p><p>后续我们会深入了解一些优化相关的原理细节，如果你有优化相关的问题，欢迎一起探讨，一起进步。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“工欲善其事，必先利其器”，在「&lt;a href=&quot;http://jartto.wang/2019/02/16/web-optimization/&quot;&gt;网站优化实战&lt;/a&gt;」中我们提到了一些优化的相关经验，并没有对优化工具展开讨论，这节就让我们一起上手实践吧！&lt;br&gt;
    
    </summary>
    
    
      <category term="技术博文" scheme="http://jartto.wang/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="web" scheme="http://jartto.wang/tags/web/"/>
    
      <category term="optimization" scheme="http://jartto.wang/tags/optimization/"/>
    
      <category term="tools" scheme="http://jartto.wang/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>程序员如何减少开发中的 Bug？</title>
    <link href="http://jartto.wang/2019/08/24/how-to-decrease-bugs/"/>
    <id>http://jartto.wang/2019/08/24/how-to-decrease-bugs/</id>
    <published>2019-08-24T03:35:27.000Z</published>
    <updated>2019-08-24T06:56:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>周会上大家抛出了一个问题，程序员如何减少开发中的 Bug？很有意思的一个话题，本篇文章我们来进行探讨与总结。<br><a id="more"></a></p><h4 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h4><p>爱因斯坦曾经说过：「如果给我一个小时解答一道决定我生死的问题，我会花55分钟来弄清楚这道题到底是在问什么。一旦清楚了它在问什么，剩下的5分钟足够解答这个问题。」</p><p>虽然我们软件开发过程不会面临生死的抉择，但是却直接影响着用户的<strong>使用感受</strong>，决定着产品的走向。所以程序员如何减少开发中的 Bug，既反映了<strong>代码质量</strong>，也反映了个<strong>人综合能力</strong>。</p><p>那么我们该如何有效的减少开发中的 Bug 呢？</p><div class="alert info"><p>我觉得应该从两方面说起：业务层和代码层。</p></div><h4 id="二、业务层"><a href="#二、业务层" class="headerlink" title="二、业务层"></a>二、业务层</h4><p>软件开发过程我们就不细说了，直接来看最重要的几个节点：</p><p>1.需求讨论阶段<br>一定要明确需求，<strong>测试，开发，产品三方务必达成一致</strong>。前期如果存在没有明确的问题，那么后期就会造成无效返工和不必要的争执，这在日常开发尤为常见。</p><div class="alert success"><p>所以，软件开发前期，我们都会进行「评审，反讲，评估」三个阶段。</p></div><p>2.开发完成阶段<br>开发完成后，程序员首先要完成「自测」，也就是软件开发中的「冒烟测试」，确保主流程无误。否则，在开发工程师提交代码后，测试工程师步履维艰，无法有效开展测试，会造成极大的资源浪费。</p><p>更规范的流程需要测试工程师在需求明确之后写出「测试用例」，开发工程师在完成开发后，自行对照「测试用例」完成初步验证，之后就可以代码提测了。</p><p>这么做的好处就是既保证了「高质量的代码交付」，同时减少了测试工程师的工作量，我们何乐而不为呢？</p><p>3.提测<br>自测和提测有什么区别呢，从软件开发过程来看，其实开发工程师和测试工程师其实完成了不同阶段的测试：</p><p>开发工程师「白盒测试」：<br>是指实际运行被测程序，<strong>通过程序的源代码进行测试而不使用用户界面</strong>。这种类型的测试需要从代码句法发现内部代码在算法、溢出、路径和条件等方面的缺点或者错误，进而加以修正。<br><div class="alert info"><p>白盒测试需要从代码句法发现内部代码在算法，溢出，路径，条件等等中的缺点或者错误，进而加以修正。</p></div></p><p>测试工程师实际进行的是「黑盒测试」。那么什么是「黑盒测试」呢？<br>黑盒测试也称功能测试，它是通过测试来检测每个功能是否都能正常使用。在测试中，把程序看作一个不能打开的黑盒子，<strong>在完全不考虑程序内部结构和内部特性的情况下，在程序接口进行测试</strong>。</p><p>它只检查程序功能是否按照需求规格说明书的规定正常使用，程序是否能适当地接收输入数据而产生正确的输出信息。<strong>黑盒测试着眼于程序外部结构，不考虑内部逻辑结构，主要针对软件界面和软件功能进行测试</strong>。</p><div class="alert warning"><p>黑盒测试是以用户的角度，从输入数据与输出数据的对应关系出发进行测试的。</p></div><p>很明显，如果外部特性本身设计有问题或规格说明的规定有误，用黑盒测试方法是发现不了的。黑盒测试法注重于测试软件的功能需求，主要试图发现下列几类错误。</p><ul><li>功能不正确或遗漏；</li><li>界面错误；</li><li>输入和输出错误；</li><li>数据库访问错误；</li><li>性能错误；</li><li>初始化和终止错误等；</li></ul><p>更多细节请查看文章：<a href="https://baike.baidu.com/item/黑盒测试/934030?fr=aladdin" target="_blank" rel="noopener">黑盒测试</a></p><h4 id="三、代码层"><a href="#三、代码层" class="headerlink" title="三、代码层"></a>三、代码层</h4><p>代码层面，我们需要从以下几方面来说起：</p><p>1.<strong>Eslint 规避低级语法问题</strong><br>这个显而易见，编写代码过程发现问题，避免因为简单语法，如：漏写了逗号，变量名写错，大小写问题等</p><p>2.<strong>边界处理</strong><br>做好容错，必要的判空，还有就是代码边界问题。多想一想如果数组不存在，我们如何处理？如果数组越界，我们如何修复？如果数据缺失，我们如何使页面不崩溃？</p><p>3.<strong>单元测试</strong><br>如果时间允许，我们可以做好单元测试，每次编译代码，或者提测前启动脚本，确定测试脚本都覆盖到了核心代码，尽可能减少代码出错率。</p><p>4.<strong>积累</strong><br>为什么说要积累，其实道理很简单。随着开发经验的增长，你可能会碰到很多问题，那么如果细心积累，其实很多错误在不知不觉中就被处理了。反之，你会不断的掉入同一个坑里，在进坑与出坑中迷失自我。那么我们如何积累呢？</p><p><strong>首先</strong>，碰到自己不会的问题，如果第一时间没有解决，通过查找或者请教别人解决了，那么一定要用小本本记下来，最好使用云笔记。好处不言自明。</p><p><strong>其次</strong>，要积累自己的函数库，我们经常用到的一些方法，不妨自己做一个封装，不断沉淀。也许有一天，你会发现，自己不知不知觉中写出了一个 Lodash 函数库。</p><p><strong>最后</strong>，你可以积累优秀的代码片段，嗯，「我们不生产代码，只是优秀代码的搬运工」。</p><p>5.学习<br>一句话，没有什么比学习优秀开源代码更有趣的事情了。<strong>阅读优秀源码，学习作者思想，站在巨人肩膀上，你才能走的更远！</strong></p><div class="alert success"><p>做好上面这些，相信你一定会是一位出色的工程师。</p></div><h4 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h4><p>对于这类开放问题仁者见仁，智者见智，我相信每个人都会有自己的看法，也会有自己一套独特的方法。<strong>不管黑猫白猫，能抓住老鼠的就是好猫</strong>。对于程序员来说，能减少 Bug 的方法就是好方法。</p><div class="alert info"><p>程序员群体流传一句话：不写代码就有没有 Bug。</p></div><p>我们不能因为怕犯错误而减少写代码，更应该知难而上，越挫越勇。要知道日常开发中 「Bug 是不可避免的，只能减少」。</p><p>当然，这不应该成为我们写出 Bug 推脱的理由。不断超越，方是永恒。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;周会上大家抛出了一个问题，程序员如何减少开发中的 Bug？很有意思的一个话题，本篇文章我们来进行探讨与总结。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术博文" scheme="http://jartto.wang/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="bug" scheme="http://jartto.wang/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>使用 Electron5.0 构建你的 React 项目</title>
    <link href="http://jartto.wang/2019/07/13/use-electron-5/"/>
    <id>http://jartto.wang/2019/07/13/use-electron-5/</id>
    <published>2019-07-13T05:51:17.000Z</published>
    <updated>2019-07-30T05:43:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近要使用 Electron 来构建 React 项目，突然发现之前的 <a href="https://github.com/chenfengyanyu/my-web-accumulation/tree/master/electron-quick-start" target="_blank" rel="noopener">Demo</a> 已经不能正常运行了，有些感概技术发展的迅猛。<br><a id="more"></a><br>如果你还不了解 <code>Electron</code>，可以看我之前的文章：<a href="http://jartto.wang/2018/01/03/first-exploration-electron/">初探 Electron - 理论篇</a>，理论知识没有变。如果你想了解 <code>Electron5.0</code> 版本如何构建 <code>React</code> 项目，不妨继续看本文。</p><div class="alert danger"><p>需要注意：网上流传的 1.0 版本的项目应该已经启动不了了。</p></div><h4 id="一、为什么要写此文"><a href="#一、为什么要写此文" class="headerlink" title="一、为什么要写此文"></a>一、为什么要写此文</h4><p>之前研究的时候，<code>Electron</code> 还是 <code>1.0</code> 版本，因此写了一系列的文章。</p><ul><li><a href="http://jartto.wang/2018/01/03/first-exploration-electron/">初探 Electron - 理论篇</a></li><li><a href="http://jartto.wang/2018/01/04/first-exploration-electron-2/">初探 Electron - 升华篇</a></li><li><a href="http://jartto.wang/2018/01/14/first-exploration-electron-3/">初探 Electron - 实践篇1</a></li><li><a href="http://jartto.wang/2018/01/21/first-exploration-electron-4/">初探 Electron - 实践篇2</a></li></ul><p>经过本次尝试，发现 <code>5.0</code> 版本有了更多的变化，所以不想误人子弟，索性更新此系列文章。</p><div class="alert info"><p>这次起手，我们就来构建一个 React 项目。</p></div><h4 id="二、创建-React-项目"><a href="#二、创建-React-项目" class="headerlink" title="二、创建 React 项目"></a>二、创建 React 项目</h4><p>1.首先，全局安装 <code>cli</code>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global create-react-app</span><br></pre></td></tr></table></figure></p><p>2.创建项目<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app electron5-react-demo</span><br></pre></td></tr></table></figure></p><p>3.启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> electron5-react-demo &amp;&amp; yarn start</span><br></pre></td></tr></table></figure></p><p>4.访问 <code>http://localhost:3000/</code> 如果看到如下页面，说明你的 <code>React</code> 项目已经成功启动了。<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/electron/react.png" alt="react"></p><h4 id="三、集成-Electron-环境"><a href="#三、集成-Electron-环境" class="headerlink" title="三、集成 Electron 环境"></a>三、集成 Electron 环境</h4><p>1.首先需要安装 <code>Electron</code> 和 <code>Electron-builder</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add electron electron-builder --dev</span><br></pre></td></tr></table></figure></p><p>2.增加相应开发工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add wait-on concurrently --dev</span><br><span class="line">yarn add cross-env electron-is-dev</span><br></pre></td></tr></table></figure></p><p>3.项目根目录下新建文件：<code>electron.js</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch public/electron.js</span><br></pre></td></tr></table></figure></p><p>此时项目目录如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── main.js</span><br><span class="line">├── node_modules</span><br><span class="line">├── public</span><br><span class="line">│   ├── electron.js</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── manifest.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── App.css</span><br><span class="line">│   ├── App.js</span><br><span class="line">│   ├── App.test.js</span><br><span class="line">│   ├── index.css</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── logo.svg</span><br><span class="line">│   └── serviceWorker.js</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure></p><p>4.修改代码，可以去<a href="https://github.com/electron/electron-quick-start/blob/master/main.js" target="_blank" rel="noopener">官网</a>上拷贝一份内容，写入 <code>electron.js</code>，具体如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Modules to control application life and create native browser window</span></span><br><span class="line"><span class="keyword">const</span> &#123;app, BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line">+ <span class="keyword">const</span> isDev = <span class="built_in">require</span>(<span class="string">'electron-is-dev'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keep a global reference of the window object, if you don't, the window will</span></span><br><span class="line"><span class="comment">// be closed automatically when the JavaScript object is garbage collected.</span></span><br><span class="line"><span class="keyword">let</span> mainWindow</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Create the browser window.</span></span><br><span class="line">  mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      preload: path.join(__dirname, <span class="string">'preload.js'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">+  mainWindow.loadURL(</span><br><span class="line">+  isDev</span><br><span class="line">+  ? <span class="string">'http://localhost:3000'</span></span><br><span class="line">+  : <span class="string">`file://<span class="subst">$&#123;path.join(__dirname, <span class="string">"../build/index.html"</span>)&#125;</span>`</span></span><br><span class="line">+  );</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// Open the DevTools.</span></span><br><span class="line">  <span class="comment">// mainWindow.webContents.openDevTools()</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Emitted when the window is closed.</span></span><br><span class="line">  mainWindow.on(<span class="string">'closed'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Dereference the window object, usually you would store windows</span></span><br><span class="line">    <span class="comment">// in an array if your app supports multi windows, this is the time</span></span><br><span class="line">    <span class="comment">// when you should delete the corresponding element.</span></span><br><span class="line">    mainWindow = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This method will be called when Electron has finished</span></span><br><span class="line"><span class="comment">// initialization and is ready to create browser windows.</span></span><br><span class="line"><span class="comment">// Some APIs can only be used after this event occurs.</span></span><br><span class="line">app.on(<span class="string">'ready'</span>, createWindow)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quit when all windows are closed.</span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// On macOS it is common for applications and their menu bar</span></span><br><span class="line">  <span class="comment">// to stay active until the user quits explicitly with Cmd + Q</span></span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) app.quit()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// On macOS it's common to re-create a window in the app when the</span></span><br><span class="line">  <span class="comment">// dock icon is clicked and there are no other windows open.</span></span><br><span class="line">  <span class="keyword">if</span> (mainWindow === <span class="literal">null</span>) createWindow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// In this file you can include the rest of your app's specific main process</span></span><br><span class="line"><span class="comment">// code. You can also put them in separate files and require them here.</span></span><br></pre></td></tr></table></figure></p><p>注意我们做了两处修改（加号位置）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入环境变量：</span></span><br><span class="line"><span class="keyword">const</span> isDev = <span class="built_in">require</span>(<span class="string">'electron-is-dev'</span>);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置启动文件</span></span><br><span class="line">mainWindow.loadURL(</span><br><span class="line">  isDev</span><br><span class="line">  ? <span class="string">'http://localhost:3000'</span></span><br><span class="line">  : <span class="string">`file://<span class="subst">$&#123;path.join(__dirname, <span class="string">"../build/index.html"</span>)&#125;</span>`</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>5.修改 <code>package.json</code> 文件，总共两处：<br>其一：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"electron5-react-demo"</span>,</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">    <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">+    <span class="string">"main"</span>: <span class="string">"public/electron.js"</span>,</span><br><span class="line">+    <span class="string">"homepage"</span>: <span class="string">"./"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其二，修改启动项：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"react-start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line"><span class="string">"react-build"</span>: <span class="string">"react-scripts build"</span>,</span><br><span class="line"><span class="string">"electron-start"</span>: <span class="string">"electron ."</span>,</span><br><span class="line"><span class="string">"electron-build"</span>: <span class="string">"electron-builder"</span>,</span><br><span class="line"><span class="string">"release"</span>: <span class="string">"yarn react-build &amp;&amp; electron-builder --publish=always"</span>,</span><br><span class="line"><span class="string">"build"</span>: <span class="string">"yarn react-build &amp;&amp; yarn electron-build"</span>,</span><br><span class="line"><span class="string">"start"</span>: <span class="string">"concurrently \"cross-env BROWSER=none yarn react-start\" \"wait-on http://localhost:3000 &amp;&amp; electron .\""</span></span><br><span class="line"><span class="string">"test"</span>: <span class="string">"react-scripts test"</span>,</span><br><span class="line"><span class="string">"eject"</span>: <span class="string">"react-scripts eject"</span>,</span><br></pre></td></tr></table></figure></p><h4 id="四、启动"><a href="#四、启动" class="headerlink" title="四、启动"></a>四、启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure><p>看到如下界面，恭喜你，已经成功启动了：<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/electron/electron.png" alt="Electron"></p><div class="alert info"><p>试着修改一下吧，热修改也已经生效了。</p></div><h4 id="五、构建"><a href="#五、构建" class="headerlink" title="五、构建"></a>五、构建</h4><p>如果你想构建，可以使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure></p><div class="alert danger"><p>需要注意：构建会同时构建 React 和 Electron 两个项目。</p></div><p>构建完成后，项目目录中会出现一个 <code>dist</code> 目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── builder-effective-config.yaml</span><br><span class="line">├── electron5-react-demo-0.1.0-mac.zip</span><br><span class="line">├── electron5-react-demo-0.1.0.dmg</span><br><span class="line">├── electron5-react-demo-0.1.0.dmg.blockmap</span><br><span class="line">├── latest-mac.yml</span><br><span class="line">└── mac</span><br><span class="line">    └── electron5-react-demo.app</span><br></pre></td></tr></table></figure></p><p>目录中的 <code>dmg</code> 就是 <code>Mac</code> 上面的安装程序，双击安装：<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/electron/dmg.png" alt="dmg"></p><p>安装之后去运行吧，到这里，我们已经完成了整个项目。</p><h4 id="六、参考"><a href="#六、参考" class="headerlink" title="六、参考"></a>六、参考</h4><ul><li><a href="https://electronjs.org/docs?q=react" target="_blank" rel="noopener">Electron 文档</a></li><li><a href="https://github.com/electron/electron-api-demos" target="_blank" rel="noopener">API</a></li><li><a href="https://medium.com/@impaachu/how-to-build-a-react-based-electron-app-d0f27413f17f" target="_blank" rel="noopener">How to build a React based Electron app</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近要使用 Electron 来构建 React 项目，突然发现之前的 &lt;a href=&quot;https://github.com/chenfengyanyu/my-web-accumulation/tree/master/electron-quick-start&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Demo&lt;/a&gt; 已经不能正常运行了，有些感概技术发展的迅猛。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术博文" scheme="http://jartto.wang/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="electron" scheme="http://jartto.wang/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>Git 代码统计</title>
    <link href="http://jartto.wang/2019/07/09/git-stats/"/>
    <id>http://jartto.wang/2019/07/09/git-stats/</id>
    <published>2019-07-09T07:09:34.000Z</published>
    <updated>2019-07-09T08:34:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我们维护一个开源项目的时候，你肯定想知道哪些人比较活跃，哪些人贡献比较多。这时候就需要一个简单易用的工具，下面我来介绍几款。<br><a id="more"></a></p><h4 id="一、场景"><a href="#一、场景" class="headerlink" title="一、场景"></a>一、场景</h4><p>目前大部分的项目可能都会用到 <code>Git</code> 来做代码管理，那么我们在不断的修改项目的过程中，可能会关注如下几个问题：</p><p>1.每个参与者贡献代码量，按劳分配某些资源🙈；<br>2.参与者的代码增删量，提交次数等；<br>3.统计活跃度；</p><div class="alert info"><p>那么，如何来对代码量做统计呢？</p></div><h4 id="二、常规操作"><a href="#二、常规操作" class="headerlink" title="二、常规操作"></a>二、常规操作</h4><p>一般情况，我们可以直接通过 <code>Git log</code> 来统计，如：</p><p>1.统计个人代码量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --author=&quot;jartto&quot; --pretty=tformat: --numstat | awk &apos;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\n&quot;, add, subs, loc &#125;&apos; -</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/git/code.png" alt="code"></p><p>2.贡献值统计：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=&apos;%aN&apos; | sort -u | wc -l</span><br></pre></td></tr></table></figure></p><p>3.查看排名前 5 的贡献者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=&apos;%aN&apos; | sort | uniq -c | sort -k1 -n -r | head -n 5</span><br></pre></td></tr></table></figure></p><div class="alert success"><p>更多 <code>log</code> 操作可以请移步：<a href="https://segmentfault.com/a/1190000008542123" target="_blank" rel="noopener">Git 代码统计</a>。</p></div><p>这时候，你可能在想：有没有省时省力的方式呢，顺便帮我生成报告。答案是肯定的，是时候请出我们的 <code>git_stats</code> 了。</p><h4 id="三、使用-git-stats"><a href="#三、使用-git-stats" class="headerlink" title="三、使用 git_stats"></a>三、使用 git_stats</h4><p>1.首先，我们需要全局安装 <code>git_stats</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install git_stats</span><br></pre></td></tr></table></figure></p><p>2.接下来，运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git_stats generate</span><br></pre></td></tr></table></figure></p><p>3.打开 <code>git_stats</code> 目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> git_stats &amp;&amp; open index.html</span><br></pre></td></tr></table></figure></p><h4 id="四、演示"><a href="#四、演示" class="headerlink" title="四、演示"></a>四、演示</h4><p>1.概览<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/git/gitstats.png" alt="generate"></p><p>2.<code>Dashboard</code> 可视化<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/git/activity.png" alt="activity"></p><p>如果你对 <code>git_stats</code> 生成的一大堆文件不满意，我们还有一种方式可以「无侵入」，同时显得更加「高冷」。</p><h4 id="五、补充：cloc"><a href="#五、补充：cloc" class="headerlink" title="五、补充：cloc"></a>五、补充：<code>cloc</code></h4><div class="alert info"><p>cloc 最优秀的地方就是「简洁粗暴」，我们来尝试一下。</p></div><p>1.尝试一下 <code>cloc</code>，首先，全局安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cloc</span><br></pre></td></tr></table></figure></p><p>2.简单用例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cloc [options] &lt;file(s)/dir(s)/git <span class="built_in">hash</span>(es)&gt;</span><br><span class="line">    Count physical lines of <span class="built_in">source</span> code and comments <span class="keyword">in</span> the given files</span><br><span class="line">    (may be archives such as compressed tarballs or zip files) and/or</span><br><span class="line">    recursively below the given directories or git commit hashes.</span><br><span class="line">    Example:    cloc src/ include/ main.c</span><br><span class="line"></span><br><span class="line">cloc [options] --diff &lt;set1&gt;  &lt;set2&gt;</span><br><span class="line">    Compute differences of physical lines of <span class="built_in">source</span> code and comments</span><br><span class="line">    between any pairwise combination of directory names, archive</span><br><span class="line">    files or git commit hashes.</span><br><span class="line">    Example:    cloc --diff Python-3.5.tar.xz python-3.6/</span><br></pre></td></tr></table></figure></p><p>3.使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage: cloc [options] &lt;file(s)/dir(s)/git hash(es)&gt; | &lt;set 1&gt; &lt;set 2&gt; | &lt;report files&gt;</span><br></pre></td></tr></table></figure></p><p>进入项目，执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloc .</span><br></pre></td></tr></table></figure></p><p>稍等片刻，就会有一个输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line">Language                         files          blank        comment           code</span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line">JavaScript                       10319         172724         254924         951843</span><br><span class="line">HTML                               679         120179           3665         224595</span><br><span class="line">JSON                              1714            256              0         182127</span><br><span class="line">Markdown                          1400          63461              2         171768</span><br><span class="line">C++                                 69           3538           3197          20331</span><br><span class="line">Python                              51           4292           7801          19137</span><br><span class="line">C/C++ Header                       117           3628           2033          18942</span><br><span class="line">CSS                                113           2011            823          16594</span><br><span class="line">XML                                 32           4427           1300          11277</span><br><span class="line">Sass                                65            282            414           4255</span><br><span class="line">Stylus                              60            539            593           3215</span><br><span class="line">YAML                               189            324            413           3039</span><br><span class="line">D                                   57              0              0           3003</span><br><span class="line">EJS                                113             43              8           2160</span><br><span class="line">reStructuredText                    18            681             51           2122</span><br><span class="line">Bourne Shell                        20            394            398           1875</span><br><span class="line">SVG                                  5              0              1           1646</span><br><span class="line">LESS                                13             26             33           1343</span><br><span class="line">make                                42            378            245           1310</span><br><span class="line">TypeScript                          17            276            584           1161</span><br><span class="line">Perl                                 1             87            170            582</span><br><span class="line">DTD                                  1            179            177            514</span><br><span class="line">m4                                   2             40              2            266</span><br><span class="line">Lisp                                 3             42             38            264</span><br><span class="line">Bourne Again Shell                   8             43             24            161</span><br><span class="line">C                                    4             40             37            149</span><br><span class="line">Ruby                                 6             24              5            140</span><br><span class="line">JSON5                                2              0              0            123</span><br><span class="line">CoffeeScript                         3             18             28             99</span><br><span class="line">Handlebars                           4             18              0             96</span><br><span class="line">Smarty                               6             17             30             91</span><br><span class="line">Windows Resource File                1              1              1             33</span><br><span class="line">DOS Batch                            5              2              0             16</span><br><span class="line">IDL                                  1              1              0             11</span><br><span class="line">zsh                                  1              4             13              7</span><br><span class="line">-----------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p><p>4.更多的使用命令，可以查看帮助<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloc --help</span><br></pre></td></tr></table></figure></p><h4 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h4><p>上文介绍了三种 <code>Git</code> 代码统计方式：</p><p>1.通过 <code>Git log</code> 统计，稍微会麻烦一些，需要有一些 <code>awk</code> 知识的储备；<br>2.使用插件 <code>git_stats</code> 来生成可视化报告，对用户友好。美中不足就是会在当前项目增加很多 <code>html</code> 统计可视化文件；<br>3.命令行工具 <code>cloc</code>，简单易用，无侵入，使用门槛低；</p><div class="alert success"><p>综上所述，我们可以按照自己的使用场景来灵活的选用不同方式。</p></div><h4 id="七、参考文档"><a href="#七、参考文档" class="headerlink" title="七、参考文档"></a>七、参考文档</h4><ul><li><a href="https://segmentfault.com/a/1190000008542123" target="_blank" rel="noopener">Git 代码统计</a></li><li><a href="https://www.zhihu.com/question/22004842/answer/177254508" target="_blank" rel="noopener">有哪些比较好用的代码量统计工具？</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们维护一个开源项目的时候，你肯定想知道哪些人比较活跃，哪些人贡献比较多。这时候就需要一个简单易用的工具，下面我来介绍几款。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术博文" scheme="http://jartto.wang/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="git" scheme="http://jartto.wang/tags/git/"/>
    
      <category term="stats" scheme="http://jartto.wang/tags/stats/"/>
    
      <category term="git_stats" scheme="http://jartto.wang/tags/git-stats/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 之跨域通讯（postMessage）</title>
    <link href="http://jartto.wang/2019/06/11/post-message/"/>
    <id>http://jartto.wang/2019/06/11/post-message/</id>
    <published>2019-06-11T08:31:21.000Z</published>
    <updated>2019-07-09T08:41:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多情况下，我们受到浏览器的安全策略限制。如何能规避此限制，并且能安全的使用跨域通讯，这就不得不介绍一下 postMessage 了。<br><a id="more"></a></p><h4 id="一、关于-postMessage"><a href="#一、关于-postMessage" class="headerlink" title="一、关于 postMessage"></a>一、关于 postMessage</h4><div class="alert success"><p>window.postMessage() 方法可以安全地实现跨源通信。</p></div><p>通常，对于两个不同页面的脚本，只有当执行它们的页面位于具有相同的协议（通常为 <code>https</code>），端口号（<code>443</code> 为 <code>https</code> 的默认值），以及主机 (两个页面的模数 <code>Document.domain</code> 设置为相同的值) 时，这两个脚本才能相互通信。</p><p><code>window.postMessage()</code> 方法提供了一种受控机制来规避此限制，只要正确的使用，这种方法就很安全。</p><h4 id="二、理解过程"><a href="#二、理解过程" class="headerlink" title="二、理解过程"></a>二、理解过程</h4><p><code>window.postMessage()</code> 方法被调用时，会在所有页面脚本执行完毕之后向目标窗口派发一个  <code>MessageEvent</code> 消息。 该 <code>MessageEvent</code> 消息有四个属性： </p><p>1.<code>message</code> 属性表示该 <code>message</code> 的类型；<br>2.<code>data</code> 属性为 <code>window.postMessage</code> 的第一个参数；<br>3.<code>origin</code> 属性表示调用 <code>window.postMessage()</code> 方法时调用页面的当前状态；<br>4.<code>source</code> 属性记录调用 <code>window.postMessage()</code> 方法的窗口信息。</p><p>关于更多细节，我们可以查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="noopener"> MDN 文档</a>，这里就不赘述了。</p><h4 id="三、兼容性"><a href="#三、兼容性" class="headerlink" title="三、兼容性"></a>三、兼容性</h4><p><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/postmsg/use.png" alt="caniuse"></p><p>通过上面的图片，我们可以看出来，几乎所有的浏览器都支持了 <code>postMessage</code>，所以放心大胆的去使用吧。</p><h4 id="四、用法简介"><a href="#四、用法简介" class="headerlink" title="四、用法简介"></a>四、用法简介</h4><p>基本用例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">otherWindow.postMessage(message, targetOrigin, [transfer]);</span><br></pre></td></tr></table></figure></p><p>1.<code>otherWindow</code><br>其他窗口的一个引用，比如 <code>iframe</code> 的 <code>contentWindow</code> 属性、执行 <code>window.open</code> 返回的窗口对象、或者是命名过或数值索引的 <code>window.frames</code>。</p><p>2.<code>message</code><br>将要发送到其他 <code>window</code> 的数据。它将会被结构化克隆算法序列化。</p><div class="alert info"><p>这意味着我们可以不受什么限制的将数据对象安全的传送给目标窗口而无需自己序列化。</p></div><p>3.<code>targetOrigin</code><br>通过窗口的 <code>origin</code> 属性来指定哪些窗口能接收到消息事件，其值可以是字符串 「*」（表示无限制）或者一个 <code>URI</code>。</p><p>在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配 <code>targetOrigin</code> 提供的值，那么消息就不会被发送；</p><p>只有三者完全匹配，消息才会被发送。这个机制用来控制消息可以发送到哪些窗口。</p><p>我们举个例子，当用 <code>postMessage</code> 传送密码时，这个参数就显得尤为重要，必须保证它的值与这条包含密码的信息的预期接受者的 <code>origin</code> 属性完全一致，来防止密码被恶意的第三方截获。</p><p>如果你明确的知道消息应该发送到哪个窗口，那么请始终提供一个有确切值的 <code>targetOrigin</code>，而不是 <code>*</code>。</p><div class="alert danger"><p>需要注意：不提供确切的目标将导致数据泄露到恶意站点。</p></div><p>4.<code>transfer</code><br>是一串和 <code>message</code> 同时传递的 <code>Transferable</code> 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。</p><h4 id="五、事件监听"><a href="#五、事件监听" class="headerlink" title="五、事件监听"></a>五、事件监听</h4><p>我们来看下面这段代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, receiveMessage, <span class="literal">false</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">receiveMessage</span>(<span class="params">event</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// For Chrome, the origin property is in the event.originalEvent</span></span><br><span class="line">  <span class="comment">// object. </span></span><br><span class="line">  <span class="comment">// 这里不准确，chrome没有这个属性</span></span><br><span class="line">  <span class="comment">// var origin = event.origin || event.originalEvent.origin; </span></span><br><span class="line">  <span class="keyword">var</span> origin = event.origin</span><br><span class="line">  <span class="keyword">if</span> (origin !== <span class="string">"http://jartto.wang:8080"</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>1.<code>data</code><br>从其他 <code>window</code> 中传递过来的对象。</p><p>2.<code>origin</code><br>调用 <code>postMessage</code>  时消息发送方窗口的 <code>origin</code> . 这个字符串由 协议、<code>://</code>、域名、<code>: 端口号</code> 拼接而成。</p><p>例如 <code>https://jartto.wang (隐含端口 443)</code>、<code>http://jartto.net(隐含端口 80)</code>、<code>http://jartto.com:8080</code>。请注意，这个 <code>origin</code> 不能保证是该窗口的当前或未来 <code>origin</code> ，因为<code>postMessage</code> 被调用后可能被导航到不同的位置。</p><p>3.<code>source</code><br>对发送消息的窗口对象的引用， 我们可以使用此来在具有不同 <code>origin</code> 的两个窗口之间建立双向通信。</p><h4 id="六、简单应用"><a href="#六、简单应用" class="headerlink" title="六、简单应用"></a>六、简单应用</h4><p>1.监听 <code>message</code> 事件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, receiveMessage, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">receiveMessage</span>(<span class="params">event</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'get it !!!'</span>,event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.发送数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.postMessage(&#123;</span><br><span class="line">    name: <span class="string">'Jartto'</span>,</span><br><span class="line">    say: <span class="string">'hello~'</span>,</span><br><span class="line">    arr: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;, <span class="string">'*'</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多情况下，我们受到浏览器的安全策略限制。如何能规避此限制，并且能安全的使用跨域通讯，这就不得不介绍一下 postMessage 了。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术博文" scheme="http://jartto.wang/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="HTML5" scheme="http://jartto.wang/tags/HTML5/"/>
    
      <category term="postMessage" scheme="http://jartto.wang/tags/postMessage/"/>
    
  </entry>
  
  <entry>
    <title>进阶 PM2</title>
    <link href="http://jartto.wang/2019/05/24/pm2-cluster/"/>
    <id>http://jartto.wang/2019/05/24/pm2-cluster/</id>
    <published>2019-05-24T11:55:22.000Z</published>
    <updated>2019-07-09T03:15:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>PM2 大大简化了 Node 任务操作，除了简单的应用外，我们还可以做一些有趣的事情。本节我们来探讨一下 PM2 的平滑启动以及数据监控。<br><a id="more"></a><br>如果你还不了解 <code>PM2</code>，可以先看看<a href="http://jartto.wang/2016/06/27/first-experience-of-pm2/">PM2 初体验</a>，或者查看<a href="https://www.jianshu.com/p/f640450bd120" target="_blank" rel="noopener">PM2 用法简介</a>。</p><h4 id="一、PM2-两种启动方式"><a href="#一、PM2-两种启动方式" class="headerlink" title="一、PM2 两种启动方式"></a>一、<code>PM2</code> 两种启动方式</h4><p>1.<code>cluster_mode</code>：用 <code>cluster</code> 来做负载均衡，我们不需要做任何代码的改动。<br>2.<code>fork_mode</code>：用 <code>fork</code> 模式启动（默认），这可以允许我们通过改变 <code>exec_interpreter</code> 参数，启动 <code>php</code> 或者 <code>python</code> 服务。      </p><div class="alert success"><p>Node.js 给我们提供了 cluster 模块，它可以生成多个工作线程来共享同一个 TCP 连接。</p></div><h4 id="二、实时扩展集群"><a href="#二、实时扩展集群" class="headerlink" title="二、实时扩展集群"></a>二、实时扩展集群</h4><p>任何时候，如果我们需要增加工作线程的数量，可以通过 <code>pm2 scale &lt;app name&gt; &lt;n&gt;</code> 来对集群进行扩展。参数 <code>&lt;n&gt;</code> 指定工作线程的数量，被用来增加或减少集群数。</p><div class="alert info"><p>补充：可以通过 pm2 scale app +3 的方式来指定要增加多少工作线程。</p></div><p><code>PM2</code> 的 <code>reload &lt;app name&gt;</code> 功能将依次重启所有的工作线程。每一个线程会等待在新的线程创建之后才会被终止掉，因此，当你在产品环境部署新的代码时，<code>Server</code> 会不间断地一直保持运行。</p><h4 id="三、平滑重启"><a href="#三、平滑重启" class="headerlink" title="三、平滑重启"></a>三、平滑重启</h4><p>1.fork 模式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"apps"</span> : [&#123;</span><br><span class="line">     <span class="string">"name"</span>         : <span class="string">"pc"</span>,</span><br><span class="line">     <span class="string">"script"</span>       : <span class="string">"jartto-server.js"</span>,</span><br><span class="line">     <span class="string">"kill_timeout"</span> : <span class="number">3000</span>,</span><br><span class="line">     <span class="string">"instances"</span>: <span class="number">2</span>,</span><br><span class="line">     <span class="string">"log_date_format"</span>: <span class="string">"YY-MM-DD HH:mm:ss Z"</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> httpServer = server.listen(port, error =&gt; &#123;</span><br><span class="line">   <span class="keyword">if</span> (error) &#123;</span><br><span class="line">       <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">   process.send(<span class="string">'ready'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">process.on(<span class="string">'SIGINT'</span>, () =&gt; &#123;</span><br><span class="line">   httpServer.close(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">       process.exit(error ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>2.<code>cluster</code><br>在集群模式下，有一个默认系统可在应用程序接受连接时将每个集群设置为就绪。还有一个超时，默认为 <code>3000</code> 毫秒，我们可以使用 <code>ecosystem</code> 文件中的 <code>listen_timeout</code> 属性进行设置。</p><p>生成 <code>ecosystem.config.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 ecosystem</span><br></pre></td></tr></table></figure></p><p>输出日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[PM2] Spawning PM2 daemon with pm2_home=/Users/jartto/.pm2</span><br><span class="line">[PM2] PM2 Successfully daemonized</span><br><span class="line">File /Users/jartto/Documents/project/ecosystem.config.js generated</span><br></pre></td></tr></table></figure></p><p>简单示例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  apps: [&#123;&#125;, &#123;&#125;], <span class="comment">// 存放每一个进程的配置信息</span></span><br><span class="line">  deploy: &#123;&#125; <span class="comment">// 包含部署配置的对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后，就可以通过 <code>startOrRestart</code> 来启动了：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "cross-env PATH_TYPE=test pm2 startOrRestart ecosystem.config.js --only jartto-test --env test",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关于 <code>apps</code> 和 <code>deploy</code> 下面我们来细致聊一聊。</p><h4 id="四、apps-部分"><a href="#四、apps-部分" class="headerlink" title="四、apps 部分"></a>四、<code>apps</code> 部分</h4><p>上面 <code>ecosystem.config.js</code> 会生成一个简单的模版，为了更好的掌握，我们来看看更全的一些配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    apps : [&#123;</span><br><span class="line">        name: <span class="string">'Jartto-test'</span>, <span class="comment">// 进程名称</span></span><br><span class="line">        script: <span class="string">'./node_modules/nuxt-start/bin/nuxt-start.js'</span>, <span class="comment">// 启动脚本地址</span></span><br><span class="line">        args: <span class="string">'-p 8888 -H 0.0.0.0'</span>, <span class="comment">// 启动的配置</span></span><br><span class="line">        cwd: </span><br><span class="line">        instances: <span class="number">4</span>,</span><br><span class="line">        autorestart: <span class="literal">true</span>,</span><br><span class="line">        watch: <span class="literal">false</span>,</span><br><span class="line">        max_restarts: <span class="number">5</span>,</span><br><span class="line">        max_memory_restart: <span class="string">'1G'</span>,</span><br><span class="line">        env: &#123;</span><br><span class="line">            NODE_ENV: <span class="string">'development'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        env_production: &#123;</span><br><span class="line">            NODE_ENV: <span class="string">'production'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    deploy : &#123;</span><br><span class="line">        production : &#123;</span><br><span class="line">            user : <span class="string">'node'</span>,</span><br><span class="line">            host : <span class="string">'212.83.163.1'</span>,</span><br><span class="line">            ref : <span class="string">'origin/master'</span>,</span><br><span class="line">            repo : <span class="string">'git@github.com:repo.git'</span>,</span><br><span class="line">            path : <span class="string">'/var/www/production'</span>,</span><br><span class="line">            post-deploy : <span class="string">'npm install &amp;&amp; pm2 reload ecosystem.config.js --env production'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>参数意义：</p><ul><li>apps：json 结构，apps 是一个数组，每一个数组成员就是对应一个pm2中运行的应用</li><li>name：应用程序的名称</li><li>cwd：应用程序所在的目录</li><li>script：应用程序的脚本路径</li><li>exec_interpreter：应用程序的脚本类型，这里使用的 shell，默认是 nodejs</li><li>min_uptime：最小运行时间，这里设置的是 60s 即如果应用程序在 60s 内退出，pm2 会认为程序异常退出，此时触发重启 max_restarts 设置数量</li><li>max_restarts：设置应用程序异常退出重启的次数，默认 15 次（从0开始计数）</li><li>exec_mode：应用程序启动模式，这里设置的是 cluster_mode（集群），默认是 fork</li><li>error_file：自定义应用程序的错误日志文件</li><li>out_file：自定义应用程序日志文件</li><li>pid_file：自定义应用程序的 pid 文件</li><li>watch：是否启用监控模式，默认是 false。如果设置成 true，当应用程序变动时，pm2 会自动重载。这里也可以设置你要监控的文件。</li></ul><h4 id="五、deploy-部分"><a href="#五、deploy-部分" class="headerlink" title="五、deploy 部分"></a>五、<code>deploy</code> 部分</h4><p>1.生成公钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id jartto@server.com</span><br></pre></td></tr></table></figure></p><p>补充说明一下：<br><code>ssh-copy-id</code> 命令可以把本地主机的公钥复制到远程主机的 <code>authorized_keys</code> 文件上，实现免密码登陆。</p><p>2.配置 <code>ecosystem</code> 文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  apps: [&#123;</span><br><span class="line">    name: <span class="string">"app"</span>,</span><br><span class="line">    script: <span class="string">"app.js"</span></span><br><span class="line">  &#125;],</span><br><span class="line">  deploy: &#123;</span><br><span class="line">    <span class="comment">// "production" is the environment name</span></span><br><span class="line">    production: &#123;</span><br><span class="line">      <span class="comment">// SSH key path, default to $HOME/.ssh</span></span><br><span class="line">      key: <span class="string">"/path/to/some.pem"</span>,</span><br><span class="line">      <span class="comment">// SSH user</span></span><br><span class="line">      user: <span class="string">"Jartto"</span>,</span><br><span class="line">      <span class="comment">// SSH host</span></span><br><span class="line">      host: [<span class="string">"192.168.0.13"</span>],</span><br><span class="line">      <span class="comment">// SSH options with no command-line flag, see 'man ssh'</span></span><br><span class="line">      <span class="comment">// can be either a single string or an array of strings</span></span><br><span class="line">      ssh_options: <span class="string">"StrictHostKeyChecking=no"</span>,</span><br><span class="line">      <span class="comment">// GIT remote/branch</span></span><br><span class="line">      ref: <span class="string">"origin/master"</span>,</span><br><span class="line">      <span class="comment">// GIT remote</span></span><br><span class="line">      repo: <span class="string">"git@github.com:jartto/repository.git"</span>,</span><br><span class="line">      <span class="comment">// path in the server</span></span><br><span class="line">      path: <span class="string">"/var/www/jartto-repository"</span>,</span><br><span class="line">      <span class="comment">// Pre-setup command or path to a script on your local machine</span></span><br><span class="line">      <span class="string">'pre-setup'</span>: <span class="string">"apt-get install git ; ls -la"</span>,</span><br><span class="line">      <span class="comment">// Post-setup commands or path to a script on the host machine</span></span><br><span class="line">      <span class="comment">// eg: placing configurations in the shared dir etc</span></span><br><span class="line">      <span class="string">'post-setup'</span>: <span class="string">"ls -la"</span>,</span><br><span class="line">      <span class="comment">// pre-deploy action</span></span><br><span class="line">      <span class="string">'pre-deploy-local'</span>: <span class="string">"echo 'This is a local executed command'"</span>,</span><br><span class="line">      <span class="comment">// post-deploy action</span></span><br><span class="line">      <span class="string">'post-deploy'</span>: <span class="string">"npm install"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>命令很简单，都有注释，这里就不赘述了。</p><p>3.是时候启动了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Setup deployment at remote location</span></span><br><span class="line">pm2 deploy production setup</span><br><span class="line"></span><br><span class="line"><span class="comment"># Update remote version</span></span><br><span class="line">pm2 deploy production update</span><br><span class="line"></span><br><span class="line"><span class="comment"># Revert to -1 deployment</span></span><br><span class="line">pm2 deploy production revert 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># execute a command on remote servers</span></span><br><span class="line">pm2 deploy production <span class="built_in">exec</span> <span class="string">"pm2 reload all"</span></span><br></pre></td></tr></table></figure></p><p>更多配置项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pm2 deploy &lt;configuration_file&gt; &lt;environment&gt; &lt;command&gt;</span><br><span class="line">  Commands:</span><br><span class="line">    setup                run remote setup commands</span><br><span class="line">    update               update deploy to the latest release</span><br><span class="line">    revert [n]           revert to [n]th last deployment or 1</span><br><span class="line">    curr[ent]            output current release commit</span><br><span class="line">    prev[ious]           output previous release commit</span><br><span class="line">    exec|run &lt;cmd&gt;       execute the given &lt;cmd&gt;</span><br><span class="line">    list                 list previous deploy commits</span><br><span class="line">    [ref]                deploy to [ref], the &quot;ref&quot; setting, or latest tag</span><br></pre></td></tr></table></figure></p><p>了解更多，请参考<a href="https://pm2.io/doc/en/runtime/guide/easy-deploy-with-ssh/#force-deployment" target="_blank" rel="noopener">官方文档</a>。</p><h4 id="六、环境变量"><a href="#六、环境变量" class="headerlink" title="六、环境变量"></a>六、环境变量</h4><p><code>pm2</code> 通过在配置文件中通过 <code>env_xx</code> 来声明不同环境的配置，然后在启动应用时，通过 <code>--env</code> 参数指定运行的环境。一个简单的示例可能如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;env&quot;: &#123;</span><br><span class="line">    &quot;NODE_ENV&quot;: &quot;production&quot;,</span><br><span class="line">    &quot;REMOTE_ADDR&quot;: &quot;http://www.jartto.wang/&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;env_dev&quot;: &#123;</span><br><span class="line">    &quot;NODE_ENV&quot;: &quot;development&quot;,</span><br><span class="line">    &quot;REMOTE_ADDR&quot;: &quot;http://dev.jartto.wang/&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;env_test&quot;: &#123;</span><br><span class="line">    &quot;NODE_ENV&quot;: &quot;test&quot;,</span><br><span class="line">    &quot;REMOTE_ADDR&quot;: &quot;http://test.jartto.wang/&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h4 id="七、负载均衡"><a href="#七、负载均衡" class="headerlink" title="七、负载均衡"></a>七、负载均衡</h4><p><code>PM2</code> 提供了强大的负载能力，我们可以通过如下命令来开启：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js -i 3 # 开启三个进程</span><br><span class="line">pm2 start app.js -i max # 根据机器CPU核数，开启对应数目的进程</span><br></pre></td></tr></table></figure></p><h4 id="八、数据监控"><a href="#八、数据监控" class="headerlink" title="八、数据监控"></a>八、数据监控</h4><p><code>PM2</code> 提供了一个数据监控命令：<code>pm2 monit</code>，执行命令后，大概界面如下：<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/pm2/monit.png" alt="monit"></p><p>看起来不错，可惜并不实用。大家可能发现了，在实际场景下，我们线上环境会有 <code>N</code> 台服务器，你会一台台上去看监控数据吗？</p><div class="alert info"><p>显然，我们碰到了另一种场景，那么如何才能统一监控呢？</p></div><p>不要着急，<code>PM2</code> 为我们提供了另外一种方式，通过在 <code>Server</code> 端运行命令：<code>pm2 web</code>，我们可以在该机器启动一个监听服务：<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/pm2/pm2web.png" alt="web"></p><p>之后，你可以通过 <code>主机 IP:9615</code> 来获取数据，如下图：<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/pm2/api.png" alt="api"></p><div class="alert info"><p>获取数据可以通过客户端轮询，或者是服务端 Socket 推送，It’s up to you!</p></div><p>最后，我们来看看数据格式：<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/pm2/data.png" alt="data"></p><p>有了数据，那么可视化岂不是小菜一碟，我们就可以在本地实时监控如下数据：<br>1.服务器内存情况；<br>2.<code>CPU</code> 使用情况；<br>3.各个站点服务情况，是否正常运转，是否报错，是否频繁重启等；<br>4.服务器平均负载；<br>…</p><h4 id="九、重置状态"><a href="#九、重置状态" class="headerlink" title="九、重置状态"></a>九、重置状态</h4><p>既然通过 <code>PM2</code> 来监控数据了，那么我们肯定希望每次的数据是准确的，所以这时候就可以使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 reset jartto-test</span><br></pre></td></tr></table></figure></p><p>来重置服务状态。</p><h4 id="十、最终效果"><a href="#十、最终效果" class="headerlink" title="十、最终效果"></a>十、最终效果</h4><p>有了数据，可视化就非常容易了，我们来看一个简单的示例：<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/pm2/show.png" alt="show"></p><p>当然，你可以做的更好，快发挥你创造性，做一些有趣的事情吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PM2 大大简化了 Node 任务操作，除了简单的应用外，我们还可以做一些有趣的事情。本节我们来探讨一下 PM2 的平滑启动以及数据监控。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术博文" scheme="http://jartto.wang/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="pm2" scheme="http://jartto.wang/tags/pm2/"/>
    
      <category term="cluster" scheme="http://jartto.wang/tags/cluster/"/>
    
      <category term="fork" scheme="http://jartto.wang/tags/fork/"/>
    
  </entry>
  
  <entry>
    <title>Nuxtjs 2.0 升级爬坑</title>
    <link href="http://jartto.wang/2019/04/23/update-nuxt2-0/"/>
    <id>http://jartto.wang/2019/04/23/update-nuxt2-0/</id>
    <published>2019-04-23T11:58:32.000Z</published>
    <updated>2019-04-23T13:18:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我在升级 Nuxt2.0 的过程，遇到了很多问题，逐一查找解决，废了不少时间。回头想想，真希望在升级的时候看到这样一篇文章，让我少走一些弯路。<br><a id="more"></a><br><div class="alert success"><p>这篇文章的意义也在于此，希望对大家能有所帮助。</p></div></p><h4 id="一、为什么要从-Nuxt1-0-升级到-Nuxt2-0？"><a href="#一、为什么要从-Nuxt1-0-升级到-Nuxt2-0？" class="headerlink" title="一、为什么要从 Nuxt1.0 升级到 Nuxt2.0？"></a>一、为什么要从 <code>Nuxt1.0</code> 升级到 <code>Nuxt2.0</code>？</h4><p>我们来看看 <code>Nuxt2.0</code> 有哪些<a href="https://www.cnblogs.com/zhuanzhuanfe/p/9101932.html" target="_blank" rel="noopener">更新</a>：</p><p>1.支持 <code>webpack4</code><br><code>webpack4</code> 有很多优化的提升，升级后就可以嗨皮的使用了。</p><p>2.弃掉了 <code>venders</code><br>我们以前一直使用 <code>vendors chunk</code>，这次发布后，我们不再使用 <code>CommonsChunkPlugin</code>，所以不必明确指定 <code>vendors</code>。</p><p><code>Nuxt</code> 自动添加了核心的 <code>packages</code> (包括 <code>vue</code>, <code>vue-router</code>, <code>babel-runtime</code>…)到 <code>Cache Group</code>中。</p><div class="alert info"><p>这使得 <code>webpack</code> 可以用最合理的方式拆分你的代码。</p></div><p>3.<code>chunk splitting</code> 的完全控制<br>尽管 <code>nuxt</code> 试图提供最有效的分割，但现在可以使用 <code>build.splitChunks</code> 选项完全控制它，并且可以选择禁用每个路由的异步块。</p><p>4.<code>Vue Loader 15 and mini-css-extract-plugin</code><br><code>Vue-Loader 15</code> 进行了完全的重写，它使用了一种完全不同的新架构，能够将 <code>webpack</code> 配置中定义的任何规则应用于 <code>*.vue</code> 文件内。</p><p>对于 <code>CSS</code> 抽取，使用一个新的插件 <code>mini-css-extract-plugin</code>，它支持 <code>CSS</code> 和 <code>SourceMaps</code>（<code>CSS splitting</code>）的按需加载，并构建在新的 <code>webpack v4</code> 特性（<code>module types</code>）上。</p><p>5.<code>nuxt es modules</code><br>我们可以在 <code>nuxt.config.js</code> 中使用 <code>import</code>, <code>export</code>, 服务器 <code>middleware</code>, <code>modules</code> 。</p><p>6.<code>CLI</code> 改善<br><code>nuxt2.0</code> 自动检测配置项和测试环境，并将切换到一个称为 <code>minimalCLI</code> 的特殊模式，其中包含更少的详细消息。</p><h4 id="二、升级-2-0"><a href="#二、升级-2-0" class="headerlink" title="二、升级 2.0"></a>二、升级 2.0</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install nuxt@latest</span><br></pre></td></tr></table></figure><h4 id="三、记得重新安装一下依赖"><a href="#三、记得重新安装一下依赖" class="headerlink" title="三、记得重新安装一下依赖"></a>三、记得重新安装一下依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure><h4 id="四、升级问题"><a href="#四、升级问题" class="headerlink" title="四、升级问题"></a>四、升级问题</h4><p>问题一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Module build failed: TypeError: Cannot read property &apos;eslint&apos; of undefined</span><br></pre></td></tr></table></figure></p><p>碰到这个问题，是因为 <code>isClient</code> 新版本已经移除了，我们试着<a href="https://github.com/nuxt/nuxt.js/issues/3216" target="_blank" rel="noopener">理解一下</a>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isClient was removed in nuxt-edge, it should be replaced by process.client in your nuxt.config.js as below.</span><br></pre></td></tr></table></figure></p><p><code>Nuxtjs1.0</code> 我们是这么用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">extend(config, &#123; isDev, isClient &#125;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDev &amp;&amp; isClient) &#123;</span><br><span class="line">        config.module.rules.push(&#123;</span><br><span class="line">        enforce: <span class="string">"pre"</span>,</span><br><span class="line">        test: <span class="regexp">/\.(js|vue)$/</span>,</span><br><span class="line">        loader: <span class="string">"eslint-loader"</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules)/</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以应该修改成：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">extend (config, &#123; isDev &#125;) &#123;</span><br><span class="line">  <span class="keyword">if</span> (isDev &amp;&amp; process.client) &#123;</span><br><span class="line">        config.module.rules.push(&#123;</span><br><span class="line">          enforce: <span class="string">'pre'</span>,</span><br><span class="line">          test: <span class="regexp">/\.(js|vue)$/</span>,</span><br><span class="line">          loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">          exclude: <span class="regexp">/(node_modules)/</span></span><br><span class="line">        &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><div class="alert info"><p>注意 isClient 和 process.client！</p></div><p>问题二：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ERROR  Failed to compile with 1 errors</span><br><span class="line">error  <span class="keyword">in</span> ./.nuxt/router.js</span><br><span class="line"></span><br><span class="line">Module parse failed: Unexpected token (24:8)</span><br><span class="line">You may need an appropriate loader to handle this file <span class="built_in">type</span>.</span><br><span class="line">|</span><br><span class="line">| var _5f05608f = <span class="keyword">function</span> <span class="function"><span class="title">_5f05608f</span></span>() &#123;</span><br><span class="line">&gt;     <span class="built_in">return</span> import(<span class="string">'../pages/account/index.vue'</span> /* webpackChunkName: <span class="string">"pages/account/index"</span> */).<span class="keyword">then</span>(<span class="keyword">function</span> (m) &#123;</span><br><span class="line">|         <span class="built_in">return</span> m.default || m;</span><br><span class="line">|     &#125;);</span><br><span class="line"></span><br><span class="line">@ ./.nuxt/index.js 334:14-36</span><br><span class="line">@ ./.nuxt/client.js</span><br><span class="line">@ multi webpack-hot-middleware/client?name=client&amp;reload=<span class="literal">true</span>&amp;timeout=30000&amp;path=/__webpack_hmr ./.nuxt/client.js</span><br></pre></td></tr></table></figure></p><p>碰到这个问题，应该是某些包不兼容，所以可以先清除 <code>node_modules</code>，重新安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf node_modules/</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure></p><p>问题三：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Plugin/Preset files are not allowed to export objects, only functions</span><br></pre></td></tr></table></figure></p><p>这个问题是因为 <code>Babel7</code> 的更新，所以我们需要<a href="https://stackoverflow.com/questions/47830273/babel-plugin-preset-files-are-not-allowed-to-export-objects-only-functions" target="_blank" rel="noopener">更新配置文件</a>：</p><p>首先修改 <code>package.json</code>：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"devDependencies": &#123;</span><br><span class="line">    "@babel/core": "^7.1.6",</span><br><span class="line">    "@babel/preset-env": "^7.1.6",</span><br><span class="line">    "@babel/preset-react": "^7.0.0",</span><br><span class="line">    "babel-loader": "^8.0.4",</span><br><span class="line">    "webpack": "^4.25.1",</span><br><span class="line">    "webpack-cli": "^3.1.2"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着更改 <code>nuxt.config.js</code>，如果使用了动态导入，需要注意<a href="https://github.com/styleguidist/react-styleguidist/issues/987" target="_blank" rel="noopener">如下配置</a>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">presets: [<span class="string">'@babel/env'</span>, <span class="string">'@babel/react'</span>],</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="string">'@babel/plugin-syntax-dynamic-import'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>问题四：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This dependency was not found: vant/lib/vant-css/index.css in ./plugins/vant.js</span><br><span class="line">import &apos;vant/lib/vant-css/index.css&apos;;</span><br></pre></td></tr></table></figure></p><p>我们发现升级后，第三方 <code>UI</code> 库的样式找不到了，通过查找，发现是文件<a href="https://youzan.github.io/vant/#/zh-CN/quickstart" target="_blank" rel="noopener">引用路径</a>发生了变化：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue’;</span></span><br><span class="line"><span class="string">import Vant from '</span>vant’;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'vant/lib/index.css’;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Vue.use(Vant);</span></span><br></pre></td></tr></table></figure></p><p>问题五：静态资源加载异常<br><div class="alert warning"><p>这个异常很明显，图片全部访问不了了，所以一定要注意看看 <code>Nuxt2.0</code> 做了<a href="https://zh.nuxtjs.org/guide/assets/" target="_blank" rel="noopener">哪些更改</a>。</p></div></p><p>请注意: 从 <code>Nuxt2.0</code> 开始，<code>~/alias</code> 将无法在 <code>CSS</code> 文件中正确解析。你必须在 <code>url CSS</code> 引用中使用 <code>~assets</code>（没有斜杠）或 <code>@</code> 别名，即 <code>background:url(&quot;~assets/banner.svg&quot;)</code></p><p>问题六：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARN  Using an Array as build.postcss will be deprecated in Nuxt 3. Please switch to the object declaration</span><br></pre></td></tr></table></figure></p><div class="alert danger"><p>意思很明了，postcss 以后需要用<a href="https://zh.nuxtjs.org/faq/postcss-plugins/" target="_blank" rel="noopener">对象声明</a>，不再支持数组方式。</p></div><p>我们将：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">postcss: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">"postcss-px2rem-exclude"</span>)(&#123;</span><br><span class="line">        remUnit: <span class="number">75</span>,</span><br><span class="line"></span><br><span class="line">        exclude: <span class="regexp">/node_modules|vant/</span></span><br><span class="line"></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123;</span><br><span class="line">        browsers: [<span class="string">'Android &gt;= 4.0'</span>, <span class="string">'iOS &gt;= 7'</span>]</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><p>替换成：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">postcss: &#123;</span><br><span class="line">    <span class="string">'postcss-px2rem-exclude'</span>: &#123;</span><br><span class="line">        emUnit: <span class="number">75</span>,</span><br><span class="line">        exclude: <span class="string">'/node_modules|vant/'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'autoprefixer'</span>: &#123;</span><br><span class="line">        browsers: [<span class="string">'Android &gt;= 4.0'</span>, <span class="string">'iOS &gt;= 7’]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br></pre></td></tr></table></figure></p><p>问题七：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReferenceError：regeneratorRuntime is not defined</span><br></pre></td></tr></table></figure></p><p>需要增加 babel <a href="https://github.com/nuxt/nuxt.js/issues/934" target="_blank" rel="noopener">运行时编译</a>，配置 <code>package.json</code>：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"babel-plugin-transform-runtime": "^6.23.0",</span><br></pre></td></tr></table></figure></p><p>修改 <code>nuxt.config.js</code> 中的配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="string">'@babel/plugin-syntax-dynamic-import'</span>,</span><br><span class="line">  <span class="string">'@babel/transform-runtime'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>问题八：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EACCES: permission denied, mkdir &apos;/Users/jartto/Documents/project/primary-station/node_modules/.cache’</span><br></pre></td></tr></table></figure></p><p>使用 <code>sudo</code> 启动，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm run start</span><br></pre></td></tr></table></figure></p><p>问题九：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ERROR in Sentry CLI Plugin: Command failed: /apps/srv/instance/test-touch.gaotu100.com/node_modules/@sentry/cli/sentry-cli releases new 2.4.0</span><br><span class="line">error: An organization slug is required (provide with --org)</span><br><span class="line"></span><br><span class="line">Add --log-level=[info|debug] or export SENTRY_LOG_LEVEL=[info|debug] to see more output.</span><br><span class="line">Please attach the full debug log to all bug reports.</span><br></pre></td></tr></table></figure></p><p>这个问题类似和问题一一样，注意替换 <code>isClient</code>。</p><h4 id="五、升级前后对比"><a href="#五、升级前后对比" class="headerlink" title="五、升级前后对比"></a>五、升级前后对比</h4><p><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/nuxt/diff.png" alt="diff"></p><p><a href="http://jartto.wang/2019/04/23/update-nuxt2-0/">如上</a>截图，我们只取了一部分，但是可以看到，文件被更细粒度的进行了拆分。这完全要归功于 <code>splitChunks</code>。当然，更多优化点和细节你可以慢慢来体会。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我在升级 Nuxt2.0 的过程，遇到了很多问题，逐一查找解决，废了不少时间。回头想想，真希望在升级的时候看到这样一篇文章，让我少走一些弯路。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术博文" scheme="http://jartto.wang/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="ppt" scheme="http://jartto.wang/tags/ppt/"/>
    
      <category term="impress" scheme="http://jartto.wang/tags/impress/"/>
    
  </entry>
  
  <entry>
    <title>酷炫的 HTML5 网页 PPT</title>
    <link href="http://jartto.wang/2019/04/15/amusing-ppt/"/>
    <id>http://jartto.wang/2019/04/15/amusing-ppt/</id>
    <published>2019-04-15T12:07:39.000Z</published>
    <updated>2019-06-06T07:10:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般演讲、培训等场合，我们都离不开 PPT，那么如何做出一款与众不同而有充满科技感的 PPT 呢？这时候，我们可以尝试一下在线 PPT。<br><a id="more"></a></p><h4 id="一、选择在线-PPT-的几大原因"><a href="#一、选择在线-PPT-的几大原因" class="headerlink" title="一、选择在线 PPT 的几大原因"></a>一、选择在线 PPT 的几大原因</h4><p>1.省去了上传下载的麻烦；<br>2.降低了客户端对 PPT 软件的依赖；<br>3.随时更新，更灵活；<br>4.同屏播放，全场互动，增加用户体验；<br>…</p><h4 id="二、多种选择"><a href="#二、多种选择" class="headerlink" title="二、多种选择"></a>二、多种选择</h4><p>1.<code>revealjs</code><br>一个可以帮我们轻易使用 <code>HTML</code> 创建漂亮演示文稿的框架。<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/ppt/ppt1.png" alt="revealjs"></p><p>2.<code>impress</code><br>效果非常酷炫，下文将深入介绍。<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/ppt/ppt2.png" alt="impress"></p><p>3.<code>fathom.js</code><br>使用 <code>HTML</code>，<code>CSS</code>，<code>JS</code> 来实现滑动页面，体验非常接近 <code>PPT</code>。<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/ppt/ppt3.png" alt="fathom"></p><p>4.focusky<br>操作界面简洁，易上手。支持 3D 幻灯片演示特效打破常规。<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/ppt/ppt5.png" alt="focusky"></p><h4 id="三、强力推荐"><a href="#三、强力推荐" class="headerlink" title="三、强力推荐"></a>三、强力推荐</h4><p>上面介绍了很多可用的在线 <code>PPT</code> 类库，在我看来最酷炫的莫过于 <code>impress.js</code>，我们先来看一个演示：<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/ppt/demo.gif" alt="impress-demo"></p><div class="alert info"><p>注意：在 Impress 中大量使用 3D 动画，可能会使页面变得卡顿。</p></div><h4 id="四、基本使用"><a href="#四、基本使用" class="headerlink" title="四、基本使用"></a>四、基本使用</h4><p>1.定义结构<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"impress"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2.每页 <code>PPT</code> 使用 <code>step</code> 类来区分<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bored"</span> <span class="attr">class</span>=<span class="string">"step"</span> <span class="attr">data-x</span>=<span class="string">"-1000"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q</span>&gt;</span>Aren’t you just <span class="tag">&lt;<span class="name">b</span>&gt;</span>bored<span class="tag">&lt;/<span class="name">b</span>&gt;</span> with all those slides-based presentations?<span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>3.使用 <code>data-x</code>，<code>data-y</code> 完成平移操作<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bored"</span> <span class="attr">class</span>=<span class="string">"step"</span> <span class="attr">data-x</span>=<span class="string">"-1000"</span> <span class="attr">data-y</span>=<span class="string">"-1500"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q</span>&gt;</span>Aren’t you just <span class="tag">&lt;<span class="name">b</span>&gt;</span>bored<span class="tag">&lt;/<span class="name">b</span>&gt;</span> with all those slides-based presentations?<span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>4.缩放：<code>data-scale</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"title"</span> <span class="attr">class</span>=<span class="string">"step"</span> <span class="attr">data-x</span>=<span class="string">"0"</span> <span class="attr">data-y</span>=<span class="string">"0"</span> <span class="attr">data-scale</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"try"</span>&gt;</span>then you should try<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>impress.js<span class="tag">&lt;<span class="name">sup</span>&gt;</span>*<span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"footnote"</span>&gt;</span><span class="tag">&lt;<span class="name">sup</span>&gt;</span>*<span class="tag">&lt;/<span class="name">sup</span>&gt;</span> no rhyme intended<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>5.页面旋转：<code>data-rotate</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"its"</span> <span class="attr">class</span>=<span class="string">"step"</span> <span class="attr">data-x</span>=<span class="string">"850"</span> <span class="attr">data-y</span>=<span class="string">"3000"</span> <span class="attr">data-rotate</span>=<span class="string">"90"</span> <span class="attr">data-scale</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      It’s a <span class="tag">&lt;<span class="name">strong</span>&gt;</span>presentation tool<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> </span><br><span class="line">      inspired by the idea behind <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://prezi.com"</span>&gt;</span>prezi.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">      and based on the <span class="tag">&lt;<span class="name">strong</span>&gt;</span>power of CSS3 transforms and transitions<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> in modern browsers.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>6.调整 <code>z</code> 方向层级 <code>data-z</code>，可以理解为离用户的远近距离<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tiny"</span> <span class="attr">class</span>=<span class="string">"step"</span> <span class="attr">data-x</span>=<span class="string">"2825"</span> <span class="attr">data-y</span>=<span class="string">"2325"</span> <span class="attr">data-z</span>=<span class="string">"-3000"</span> <span class="attr">data-rotate</span>=<span class="string">"300"</span> <span class="attr">data-scale</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>and <span class="tag">&lt;<span class="name">b</span>&gt;</span>tiny<span class="tag">&lt;/<span class="name">b</span>&gt;</span> ideas<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>7.使用 <code>data-rotate-x</code>, <code>data-rotate-y</code>, <code>data-rotate-z</code> 实现 <code>3D</code> 旋转<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;its-in-3d&quot; class=&quot;step&quot; data-x=&quot;6200&quot; data-y=&quot;4300&quot; data-z=&quot;-100&quot; data-rotate-x=&quot;-40&quot; data-rotate-y=&quot;10&quot; data-scale=&quot;2&quot;&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      &lt;span class=&quot;have&quot;&gt;have&lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;you&quot;&gt;you&lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;noticed&quot;&gt;noticed&lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;its&quot;&gt;it’s&lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;in&quot;&gt;in&lt;/span&gt;</span><br><span class="line">      &lt;b&gt;3D&lt;sup&gt;*&lt;/sup&gt;&lt;/b&gt;?</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;span class=&quot;footnote&quot;&gt;* beat that, prezi ;)&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>此外，还有一些可用的 <code>css</code> 类，<code>js</code> 初始化方法，以及 <code>stepenter</code> 事件等，具体可以参考<a href="https://github.com/impress/impress.js/blob/master/DOCUMENTATION.md" target="_blank" rel="noopener">官方文档</a>。</p><h4 id="五、投屏互动"><a href="#五、投屏互动" class="headerlink" title="五、投屏互动"></a>五、投屏互动</h4><p>演讲者端，监听 <code>impress:stepgoto</code> 事件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> impressiv = <span class="function"><span class="keyword">function</span>(<span class="params">presi,session</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> socket = io.connect(<span class="string">'http://jartto.wang'</span>);</span><br><span class="line">        socket.on(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        socket.emit(<span class="string">'join'</span>, &#123;<span class="attr">presi</span>: presi, <span class="attr">session</span>:session&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'演示结束，欢迎观看！'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'impress:stepgoto'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        socket.emit(<span class="string">'slide'</span>, &#123;<span class="attr">slide</span>:event.target.id&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>观众端，接收 <code>slide</code> 消息，然后自动翻页：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> impressiv = <span class="function"><span class="keyword">function</span>(<span class="params">presi</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> socket = io.connect(<span class="string">'http://jartto.wang'</span>);</span><br><span class="line">  socket.on(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    socket.emit(<span class="string">'join'</span>, &#123;<span class="attr">presi</span>: presi&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  socket.on(<span class="string">'slide'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 控制用户端翻页</span></span><br><span class="line">    impress().goto(data.slide);</span><br><span class="line">  &#125;);</span><br><span class="line">  socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'演示结束，欢迎观看！'</span>);</span><br><span class="line">    <span class="comment">// io.disconnect();</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要特别注意，我们要禁止掉观众端的操作事件，否则你演讲过程就会被别人牵着鼻子走了🙈～<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).unbind(<span class="string">'touchstart'</span>);</span><br><span class="line">$(<span class="built_in">document</span>).unbind(<span class="string">'click'</span>);</span><br><span class="line">$(<span class="built_in">document</span>).unbind(<span class="string">'keydown'</span>);</span><br><span class="line">$(<span class="built_in">document</span>).unbind(<span class="string">'keyup'</span>);</span><br></pre></td></tr></table></figure></p><h4 id="六、可视化编辑"><a href="#六、可视化编辑" class="headerlink" title="六、可视化编辑"></a>六、可视化编辑</h4><p>如果你不喜欢写代码，我们可以选择<a href="http://qti3e.github.io/Imprezi/#/step-2" target="_blank" rel="noopener">可视化编辑器</a>。<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/ppt/ppt4.png" alt="visi"></p><h4 id="七、更多资源"><a href="#七、更多资源" class="headerlink" title="七、更多资源"></a>七、更多资源</h4><ul><li><a href="https://devzum.com/2014/11/10-best-javascript-and-html5-presentation-frameworks/" target="_blank" rel="noopener">10 Best JavaScript And HTML5 Presentation Frameworks</a></li><li><a href="https://github.com/impress/impress.js/wiki/Examples-and-demos" target="_blank" rel="noopener">impress examples-and-demos</a></li><li><a href="http://qti3e.github.io/Imprezi/#/step-2" target="_blank" rel="noopener">可视化编辑器</a></li><li><a href="https://github.com/melix/deck2pdf" target="_blank" rel="noopener">impress 导出 pdf</a></li><li><a href="https://github.com/impress/impress.js/blob/master/DOCUMENTATION.md" target="_blank" rel="noopener">impress api 文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般演讲、培训等场合，我们都离不开 PPT，那么如何做出一款与众不同而有充满科技感的 PPT 呢？这时候，我们可以尝试一下在线 PPT。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术博文" scheme="http://jartto.wang/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="ppt" scheme="http://jartto.wang/tags/ppt/"/>
    
      <category term="impress" scheme="http://jartto.wang/tags/impress/"/>
    
      <category term="html5" scheme="http://jartto.wang/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>如何成为合格的技术面试官？</title>
    <link href="http://jartto.wang/2019/04/07/learn-interview/"/>
    <id>http://jartto.wang/2019/04/07/learn-interview/</id>
    <published>2019-04-07T13:12:42.000Z</published>
    <updated>2019-04-15T12:11:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为技术面试官，<a href="http://jartto.wang/2019/01/06/f2e-interview/">面试过程</a>很少考虑候选人的感受。上来就是问，不合适就送走。虽然技术环节我很专业，但是其他细节我却知之甚少。<br><a id="more"></a><br>从来没觉得这样会有什么问题，直到有一天，我参加了一场面试官培训，才意识到自身的不足。</p><h4 id="一、明确面试的目的"><a href="#一、明确面试的目的" class="headerlink" title="一、明确面试的目的"></a>一、明确面试的目的</h4><p>作为公司的面试官，我们不是为了鄙视和炫耀技术，而是评估候选人能否担任工作。这属于团队建设核心工作，也是公司的一次品牌宣传。</p><div class="alert info"><p>你代表的不仅是个人，还有公司的形象，请尊重每一位候选人。</p></div><p>仓央嘉措曾经说过：我以为别人尊重我，是因为我很优秀。慢慢的我明白了，别人尊重我，是因为别人很优秀；优秀的人更懂得尊重别人。对人恭敬其实是在庄严你自己。</p><h4 id="二、开场过程"><a href="#二、开场过程" class="headerlink" title="二、开场过程"></a>二、开场过程</h4><p>为了体现足够的重视和面试的专业性，在开场过程，我们需要注意以下几点：<br>1.为候选人倒杯温水<br>这个我深有体会，有时候在持续多轮面试后，候选人已经嗓子冒烟了。所以，一杯水体现了公司的细节和关怀。</p><p>2.简单的寒暄缓和气氛<br>先简单的问候和寒暄，调整一下面试氛围，让候选人在舒服的气氛中开始。</p><p>3.面试官简单自我介绍<br>面试官应该做一下自我介绍，明确自己角色。阐述面试流程，告知候选人面试过程需要用电脑做记录。</p><p>4.候选人自我介绍<br>完成上面几项后，就可以从候选人自我介绍进入面试主流程了。</p><p>5.Q&amp;A<br>面试最后问问候选人，是否有什么问题想问，或者可以说说自己擅长而又没有被问到的方面。</p><p>6.致谢<br>感谢候选人能够花时间过来面试，表现出足够的重视。</p><p>7.告知等候时间/送候选人出去</p><div class="alert info"><p>让候选人更好的发挥，也为高效的面试做好铺垫。</p></div><h4 id="三、面试问题"><a href="#三、面试问题" class="headerlink" title="三、面试问题"></a>三、面试问题</h4><p>1.根据简历提前准备好，针对不同 <code>level</code> 使用不同题目；<br>2.不使用偏难怪题；<br>3.切合候选人的经验，不要依据自己熟悉的领域提问；<br>4.考察素质能力尽量使用相同的问题，以保证横向比较的公平；<br>5.问题和所面职位具有相关性；</p><h4 id="四、完整的行为示例-STAR"><a href="#四、完整的行为示例-STAR" class="headerlink" title="四、完整的行为示例 - STAR"></a>四、完整的行为示例 - STAR</h4><p>我们先来看看 <code>STAR</code> 解释：<code>Situation</code>, <code>Task</code>, <code>Action</code>, <code>Result</code>。</p><p>示例：<br>举个例子说说你擅长性能优化。</p><p>要点：<br>当时情况怎么样，需要做什么，采取了什么行动，达到了什么效果。</p><p>理念：<br>在收集 <code>STAR</code> 的时候不断提出更加深入的问题来判断其对该带我的认知程度及抗压能力。</p><h4 id="五、面试分工"><a href="#五、面试分工" class="headerlink" title="五、面试分工"></a>五、面试分工</h4><p>面试一般会分几轮，所以不同的面试官面试的重点也应该有所区别。<br>一面：基本技能（知识，专业技能）<br>二面：逻辑分析（专业技能，能力）<br>三面：综合素质（个性特征、动机、价值观）</p><p>这样的好处有两个：<br>1.在每一轮全面的面试相关领域；<br>2.避免重复的询问，导致过差的体验；</p><p>曾经有过这样的经历，在面试某大公司的过程，总共经历 4 次面试（三轮技术面，一轮 <code>HR</code> 面）。每一面都需要自我介绍，甚至还有重复的问题，整个过程体验非常差。第一、我觉得该公司并没有尊重我；第二、公司效率很低；第三、只是提自己的问题，从来不考虑候选人的感受；</p><p>所以面完之后我直接拒绝了，虽然浪费了时间，但是却让我排除了一些徒有虚名的公司。</p><div class="alert danger"><p>做好面试纪录，避免重复问题，以及避免第一印象效应。</p></div><h4 id="六、考察综合素质"><a href="#六、考察综合素质" class="headerlink" title="六、考察综合素质"></a>六、考察综合素质</h4><p>为了考察候选人的综合素质，面试过程我们其实可以从六方面去考察：<br>1.知识：<br>也就是我们常说的基本功。</p><p>2.专业技能：<br>职位相关的技术能力，这决定你是否能胜任工作。</p><p>3.能力：<br>个人能力包括：思维能力，学习能力，迁移能力，扩展能力等等。</p><p>4.个性特性：<br>正直诚实，责任心，坚韧性。</p><p>5.动机：<br>体现在成就导向，主动性。</p><p>6.价值观：<br>体现在团队合作。</p><div class="alert success"><p>从技能到性格，再到自驱以及团队合作，相信这样的人不优秀也难。</p></div><h4 id="七、评估"><a href="#七、评估" class="headerlink" title="七、评估"></a>七、评估</h4><p>1.有潜力：<br>能够在一段时间内，通过培养，胜任范围更大，难度更高的项目。</p><p>2.能干活：<br>能够胜任当前的工作，但是因某项能力（技术基础 or 某项软素质）较弱，在发展上会受到一些限制。</p><p>3.三颗完整 <a href="#"><code>STAR</code></a> 确实一项事实：<br>在收集 <code>STAR</code> 的时候不断提出更加深入的问题来判断其对该带我的认知程度及抗压能力。</p><p>优点：尽可能挖掘优点，如果有需要后面可以调整面试方向。<br>不足：基于我们职位要求。</p><p>4.预测：<br>通过其过去的行为来预测将来的行为。</p><div class="alert info"><p>做到上面这些，相信你会成为一个更有魅力的面试官。</p></div><p>不管是作为面试官还是候选人，我们都需要去了解这些流程。作为面试官，我们应该提升自身的综合素质，为公司树立较好的品牌效果。作为候选人，我们可以以此来判断该公司的靠谱程度，避免坐坑。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为技术面试官，&lt;a href=&quot;http://jartto.wang/2019/01/06/f2e-interview/&quot;&gt;面试过程&lt;/a&gt;很少考虑候选人的感受。上来就是问，不合适就送走。虽然技术环节我很专业，但是其他细节我却知之甚少。&lt;br&gt;
    
    </summary>
    
    
      <category term="面试笔试" scheme="http://jartto.wang/categories/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://jartto.wang/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="interview" scheme="http://jartto.wang/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>算法学习思路</title>
    <link href="http://jartto.wang/2019/04/07/learn-algorithm/"/>
    <id>http://jartto.wang/2019/04/07/learn-algorithm/</id>
    <published>2019-04-07T11:06:18.000Z</published>
    <updated>2019-04-07T13:54:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多前端童鞋对算法都有莫名的恐惧，究其原因无非两点：其一，对算法不了解；其二，没有找到实际应用场景。<br><a id="more"></a></p><h4 id="一、为什么学习算法？"><a href="#一、为什么学习算法？" class="headerlink" title="一、为什么学习算法？"></a>一、为什么学习算法？</h4><p>这是个很有意思的问题，对算法感兴趣的人，不需要问为什么，算法对他们可能是一种兴趣。曾经有位同事，他刷遍了所有算法题，只要有算法竞赛，他都会去参加。当然，也取得了不错的成绩，甚至有了自己的世界排名。</p><p>一次闲聊中，我抛出了这个问题，他笑着说：没有为什么，就是觉得好玩。我一直好奇，为什么有人会觉得算法好玩，兴趣点究竟在哪里？</p><div class="alert info"><p>其实兴趣算一部分，而另一部分则是对编程能力的提升以及思维的扩展。</p></div><p>编程语言虽然该学，但是学习计算机算法和理论更重要，因为计算机语言和开发平台日新月异，但万变不离其宗的是那些算法和理论。</p><p>我们用两张趣图来看看差别：<br>1.学习算法前，你可能这样：<br><div class="figure left" style="width:70%;"><a class="fancybox" href="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/algorithm/dog2.gif" title data-fancybox-group="travel" target="_blank" rel="noopener"><img class="fig-img" src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/algorithm/dog2.gif" style="width:70%;" alt></a></div><div style="clear:both;"></div></p><p>2.学习算法后，你变的机灵了：<br><div class="figure left" style="width:70%;"><a class="fancybox" href="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/algorithm/dog1.gif" title data-fancybox-group="travel" target="_blank" rel="noopener"><img class="fig-img" src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/algorithm/dog1.gif" style="width:70%;" alt></a></div><div style="clear:both;"></div></p><h4 id="二、如何入门？"><a href="#二、如何入门？" class="headerlink" title="二、如何入门？"></a>二、如何入门？</h4><p>那么如何学习算法呢？这里我推荐一本书《算法图解》，超薄的小册。书中通过一些简单有趣的例子来阐述算法的应用场景。之所以选它作为入门，是因为我们可以用很短的时间去翻读。</p><p>如果你还是觉得很麻烦，不用怕，我已经帮你准备好了学习笔记：</p><ul><li><a href="http://jartto.wang/2018/11/22/algorithm1/">算法图解1 - 二分查找和大O表示法</a></li><li><a href="http://jartto.wang/2018/11/25/algorithm2/">算法图解2 - 数组和链表</a></li><li><a href="http://jartto.wang/2018/11/26/algorithm3/">算法图解3 - 递归，快排</a></li><li><a href="http://jartto.wang/2018/11/27/algorithm4/">算法图解4 - 散列表</a></li><li><a href="http://jartto.wang/2018/11/28/algorithm5/">算法图解5 - 图和广度优先搜索</a></li><li><a href="http://jartto.wang/2018/11/29/algorithm6/">算法图解6 - 狄克斯特拉算法与贪婪算法</a></li><li><a href="http://jartto.wang/2018/11/29/algorithm7/">算法图解7 - 动态规划</a></li></ul><p>书中是围绕 <code>Python</code> 来写的，为了更适合前端童鞋阅读，我已经将相关代码用 <code>JS</code> 实现了一遍。当然，还是有很多的细节，还需要深入的去理解。但是最起码，我不再惧怕算法了，反而慢慢有点喜欢了。</p><div class="alert info"><p>算法的重中之重是培养算法思维。如果你能对算法灵活运用，那么就「大成」了。</p></div><h4 id="三、后面的路怎么走？"><a href="#三、后面的路怎么走？" class="headerlink" title="三、后面的路怎么走？"></a>三、后面的路怎么走？</h4><p>入门从来都不是一件简单的事情，在我们打开这扇神秘大门之后，将会有更多的宝藏需要我们去挖掘。</p><p>想要精通算法，在第一本书读完之后，我们还有更多的目标需要去完成。这里由浅入深的列举一些算法经典书籍，供大家参考学习：</p><p>1.入门系列：<br>《算法图解》《大话数据结构》<br>2.教科书之类：<br>《数据结构与算法分析》<br>3.进阶之旅：<br>《算法导论》<br>4.针对面试准备：<br>《剑指 Offer》《编程珠玑》<br>5.扩展阅读：<br>《算法之美》《算法帝国》<br>6.实践操作：<br>《算法竞赛入门经典》《力扣题库》</p><p>算法其实有很多经典书籍，我们没有那么多的时间去逐一翻阅，但是我们可以有一条明确的学习路线。</p><div class="alert success"><p>这条学习路线就是：入门 - 进阶 - 实践 - 升华</p></div><h4 id="四、配合实践"><a href="#四、配合实践" class="headerlink" title="四、配合实践"></a>四、配合实践</h4><p>其实<a href="http://jartto.wang/2019/04/07/learn-algorithm/">上面</a>已经提到了，在我们掌握算法思维之后，最为重要的一点就是刷题。相信很多童鞋都听过 <code>LeetCode</code> ，目前题库大概有 1000＋ 题目，没事了就去刷刷。</p><div class="figure left" style="width:70%;"><a class="fancybox" href="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/algorithm/leetcode.png" title data-fancybox-group="travel" target="_blank" rel="noopener"><img class="fig-img" src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/algorithm/leetcode.png" style="width:70%;" alt></a></div><div style="clear:both;"></div><p>当然，刷题也可以由浅入深，先从简单的入手吧！<br><img src="https://raw.githubusercontent.com/chenfengyanyu/my-web-accumulation/master/images/algorithm/leetcode2.png" alt="leetcode"></p><h4 id="五、推荐学习"><a href="#五、推荐学习" class="headerlink" title="五、推荐学习"></a>五、推荐学习</h4><p><a href="https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md" target="_blank" rel="noopener">JavaScript 算法与数据结构</a><br><a href="http://algorithm-visualizer.org/#path=sorting/bucket/basic" target="_blank" rel="noopener">可视化学习算法的好工具</a><br><a href="https://www.zhihu.com/question/24964987" target="_blank" rel="noopener">互联网公司最常见的面试算法题有哪些？</a><br><a href="https://github.com/chenfengyanyu/interview" target="_blank" rel="noopener">算法练习，和我一起来刷题吧～</a></p><h4 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h4><p>文章陆陆续续说了这么多，大体总结如下：<br>1.算法很重要，尤其是对于前端童鞋；<br>2.算法学习最好由浅入深，先了解算法思维，再去理解实际应用；<br>3.从一本小而薄的书开启，逐步全面的掌握相关知识体系；<br>4.推荐速成路线：《算法图解》-《剑指 Offer》- LeetCode 刷题 -《算法之美》-《算法导论》；<br>5.去努力实践，刷刷题库，参加参加竞赛；</p><p>好了，就这些吧，祝大家早日搞定算法，带上算法的王冠，去领略算法之美吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多前端童鞋对算法都有莫名的恐惧，究其原因无非两点：其一，对算法不了解；其二，没有找到实际应用场景。&lt;br&gt;
    
    </summary>
    
    
      <category term="算法实践" scheme="http://jartto.wang/categories/%E7%AE%97%E6%B3%95%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="algorithm" scheme="http://jartto.wang/tags/algorithm/"/>
    
  </entry>
  
</feed>
